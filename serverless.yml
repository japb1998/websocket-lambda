
service: websocket

useDotenv: true

frameworkVersion: '3'

plugins:
  - serverless-deployment-bucket

provider:
  name: aws
  runtime: provided.al2
  architecture: arm64
  versionFunctions: false

custom:
  deploymentBucket:
    name: ${env:APP_ID}
    serverSideEncryption: AES256
  websocketUrl : !Join ['', ['https://', !Ref WebsocketsApi, '.execute-api.', !Sub '${AWS::Region}', '.amazonaws.com/', "${opt:stage, 'dev'}"]]

package:
  individually: true

functions:
  wsocket:
    timeout: 29
    memorySize: 128
    role: !GetAtt DefaultRole.Arn
    handler: bootstrap
    package:
      artifact: ./bin/connection/connection.zip
    events:
      - websocket:
          route: $connect
          authorizer:
            name: authorizerFunc
            identitySource:
              - route.request.querystring.Auth
      - websocket:
          route: $disconnect
      - websocket:
          route: $default
    environment:
      CONNECTION_TABLE: !Ref ConnectionsDataTable
  authorizerFunc:
    timeout: 10
    memorySize: 128
    role: !GetAtt DefaultRole.Arn
    handler: bootstrap
    package:
      artifact: ./bin/authorizer/authorizer.zip
    environment:
      REGION: !Sub ${AWS::Region}
      ACCOUNT_ID: !Sub ${AWS::AccountId}
      API_ID: !Ref WebsocketsApi
      STAGE: ${opt:stage, 'dev'}
  schedule-event:
    timeout: 10
    memorySize: 128
    role: !GetAtt DefaultRole.Arn
    handler: bootstrap
    package:
      artifact: ./bin/schedule/schedule.zip
    environment:
      CONNECTION_TABLE: !Ref ConnectionsDataTable
      WS_URL: ${self:custom.websocketUrl}
    events:
      - schedule: rate(1 minute)
# you can add CloudFormation resource templates here
resources:
  Resources:
    ConnectionsDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-connections-database
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: partitionKey
            AttributeType: 'S'
          - AttributeName: sortKey
            AttributeType: 'S'
        KeySchema:
          - AttributeName: partitionKey
            KeyType: HASH
          - AttributeName: sortKey
            KeyType: RANGE
    DefaultRole:
        Type: AWS::IAM::Role
        Properties:
          RoleName: ${env:APP_ID}-dynamo-access-${opt:stage, 'dev'}
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action: sts:AssumeRole
          Policies:
            - PolicyName: ${env:APP_ID}-dynamo-access-${opt:stage, 'dev'}
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - dynamodb:*
                    Resource:
                      - !GetAtt ConnectionsDataTable.Arn 
                      - !Join ["",[!GetAtt ConnectionsDataTable.Arn, "/index/*"]]
            - PolicyName: ${env:APP_ID}-cloudwatch-default-${opt:stage, 'dev'}
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - logs:CreateLogStream
                      - logs:CreateLogGroup
                      - logs:TagResource
                      - logs:PutLogEvents
                    Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
            - PolicyName: ${env:APP_ID}-ws-access-${opt:stage, 'dev'}
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - execute-api:Invoke
                      - execute-api:ManageConnections
                    Resource:
                      - 'arn:aws:execute-api:*:*'
